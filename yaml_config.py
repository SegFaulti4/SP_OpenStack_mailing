import yaml


with open("clouds.yaml", "r") as f:
    config = yaml.load(f, Loader=yaml.FullLoader)

configs = {
    'logger': {
        'filename': 'sample.log',
        'Formatter': '%(message)s'
    },
    'clouds': config['clouds'],
    'email': {
        'host': 'smtp.rambler.ru:465',
        'From': 'makar.popov01@rambler.ru',
        'To': 'makar.popov01@rambler.ru',
        'Subject': 'OpenStack',
    },
    'output_filter': {
        'image': [
            'checksum',
            'container_format',
            'created_at',
            'disk_format',
            'is_hidden',
            'is_protected',
            'hash_algo',
            'hash_value',
            'min_disk',
            'min_ram',
            'size',
            'store',
            'status',
            'updated_at',
            'virtual_size',
            'visibility',
            'file',
            'locations',
            'direct_url',
            'url',
            'metadata',
            'architecture',
            'hypervisor_type',
            'instance_type_rxtx_factor',
            'instance_uuid',
            'needs_config_drive',
            'kernel_id',
            'os_distro',
            'os_version',
            'needs_secure_boot',
            'os_shutdown_timeout',
            'ramdisk_id',
            'vm_mode',
            'hw_cpu_sockets',
            'hw_cpu_cores',
            'hw_cpu_threads',
            'hw_disk_bus',
            'hw_cpu_policy',
            'hw_cpu_thread_policy',
            'hw_rng_model',
            'hw_machine_type',
            'hw_scsi_model',
            'hw_serial_port_count',
            'hw_video_model',
            'hw_video_ram',
            'hw_watchdog_action',
            'os_command_line',
            'hw_vif_model',
            'is_hw_vif_multiqueue_enabled',
            'is_hw_boot_menu_enabled',
            'vmware_adaptertype',
            'vmware_ostype',
            'has_auto_disk_config',
            'os_type',
            'os_admin_user',
            'hw_qemu_guest_agent',
            'os_require_quiesce',
            'schema',
            'location',
            'tags',
            'name',
            'owner',
            'owner_id',
            'id',
            'properties'
        ],
        'security_group': [
            'created_at',
            'description',
            'stateful',
            'project_id',
            'updated_at',
            'revision_number',
            'location',
            'tags',
            'name',
            'tenant_id',
            'id',
            'security_group_rules'
        ],
        'volume': [
            'links',
            'availability_zone',
            'source_volume_id',
            'description',
            'snapshot_id',
            'size',
            'image_id',
            'is_bootable',
            'metadata',
            'volume_image_metadata',
            'status',
            'attachments',
            'created_at',
            'project_id',
            'migration_status',
            'migration_id',
            'replication_status',
            'extended_replication_status',
            'consistency_group_id',
            'replication_driver_data',
            'is_encrypted',
            'location',
            'id',
            'name',
            'volume_type',
            'host',
            'user_id'
        ],
        'server': [
            'links',
            'access_ipv4',
            'access_ipv6',
            'addresses',
            'admin_password',
            'attached_volumes',
            'availability_zone',
            'block_device_mapping',
            'config_drive',
            'created_at',
            'description',
            'disk_config',
            'flavor_id',
            'flavor',
            'has_config_drive',
            'host_status',
            'hypervisor_hostname',
            'is_locked',
            'kernel_id',
            'launch_index',
            'launched_at',
            'metadata',
            'networks',
            'personality',
            'power_state',
            'progress',
            'project_id',
            'ramdisk_id',
            'reservation_id',
            'root_device_name',
            'scheduler_hints',
            'server_groups',
            'status',
            'task_state',
            'terminated_at',
            'trusted_image_certificates',
            'updated_at',
            'vm_state',
            'location',
            'tags',
            'compute_host',
            'host_id',
            'hostname',
            'image_id',
            'image',
            'instance_name',
            'key_name',
            'user_data',
            'user_id',
            'id',
            'name',
        ],
        'user': [
            'default_project_id',
            'description',
            'domain_id',
            'is_enabled',
            'links',
            'password',
            'password_expires_at',
            'location',
            'email',
            'name',
            'id',
        ],
        'properties': [
            'owner_specified.openstack.md5',
            'owner_specified.openstack.object',
            'owner_specified.openstack.sha256',
            'public',
            'stores',
            'project',
            'project_domain',
            'isp',
            'base_image_ref',
            'boot_roles',
            'image_location',
            'image_state',
            'image_type',
            'owner_project_name',
            'owner_user_name',
            'user_id',
            'shared',
        ],
        'security_group_rules': [
            # 'id',
            'tenant_id',
            # 'security_group_id',
            'ethertype',
            'direction',
            'protocol',
            'port_range_min',
            'port_range_max',
            'remote_ip_prefix',
            'remote_group_id',
            'description',
            'tags',
            'created_at',
            'updated_at',
            'revision_number',
            'project_id',
        ]
    }
}


with open('config.yaml', 'w') as out_file:
    yaml.safe_dump(configs, out_file)
